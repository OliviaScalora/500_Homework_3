mydata <- read.csv("https://github.com/OliviaScalora/500_Homework_3/blob/858985b4bd3a8fc35e5e18c613a101c6c87c1fc9/Logistic%20Regression%20Data.csv")
View(mydata)
mydata <- read.csv("https://raw.githubusercontent.com/OliviaScalora/500_Homework_3/main/LogisticRegressionData.csv")
mydata <- read.csv("https://raw.githubusercontent.com/OliviaScalora/500_Homework_3/main/Logistic Regression Data.csv")
View(mydata)
head(mydata)
library(aod)
library(ggplot2)
library(rms)
library(gmodels)
library(boot)
library(DAAG)
library(ROCR)
library(tidyr)
library(dplyr)
library(MASS)
library(rsq)
library(kableExtra)
library(tidyverse) #for ggplot
library(classInt)#for jenks breaks
library(rgdal)
library(RColorBrewer)
library(broom)
library(maptools)
library(spdep)
library(spgwr)
library(rgeos)
library(ape)
library(tmap)
library(sp)
library(spatialreg)
library(kableExtra)
library(knitr)
#install.packages('DT')
library(DT)
#library(packagename)
library(aod)
library(ggplot2)
library(rms)
library(gmodels)
library(boot)
library(DAAG)
library(ROCR)
library(tidyr)
library(dplyr)
library(MASS)
library(rsq)
library(kableExtra)
library(tidyverse) #for ggplot
#library(sf) #for maps
#library(cowplot) #for plotgrid
library(classInt)#for jenks breaks
library(rgdal)
library(RColorBrewer)
library(broom)
library(maptools)
library(spdep)
library(spgwr)
library(rgeos)
library(ape)
library(tmap)
library(sp)
library(spatialreg)
library(kableExtra)
library(knitr)
#install.packages('DT')
library(DT)
#Step 1 -------------------------------------
mydata <- read.csv("https://raw.githubusercontent.com/OliviaScalora/500_Homework_3/main/Logistic Regression Data.csv")
head(mydata)
#Tabulations
summary(factor(mydata$DRINKING_D))
summary(factor(mydata$COLLISION_))
summary(factor(mydata$FATAL_OR_M))
summary(factor(mydata$OVERTURNED))
summary(factor(mydata$CELL_PHONE))
summary(factor(mydata$SPEEDING))
summary(factor(mydata$AGGRESSIVE))
summary(factor(mydata$DRIVER1617))
summary(factor(mydata$DRIVER65PLUS))
#Alternative way of tabulating (and obtaining proportions for each category)
DRINKING_D.tab <- table(mydata$DRINKING_D)
prop.table(DRINKING_D.tab)
DRINKING_D.tab
prop.table(DRINKING_D.tab)%>%kable()%>%kable_material_dark()
prop.table(DRINKING_D.tab)%>%kable()%>%kable_material()
prop.table(DRINKING_D.tab)%>%kable()%>%kable_paper()
prop.table(DRINKING_D.tab)%>%kable()%>%kable_classic_2()
prop.table(DRINKING_D.tab)%>%kable()%>%kable_minimal()
prop.table(DRINKING_D.tab)%>%kable()%>%kable_classic()
prop.table(DRINKING_D.tab)%>%kable()%>%kable_material()
prop.table(DRINKING_D.tab)%>%kable()%>%kable_material()%>%kable_styling(full_width = FALSE)
prop.table(DRINKING_D.tab)%>%kable(full_width=F)%>%kable_material()
prop.table(DRINKING_D.tab)%>%kable(full_width=F)%>%kable_material()%>%kable_styling(full_width=F)
prop.table(DRINKING_D.tab)%>%kable("html", align = "ll")%>%kable_material()%>%kable_styling(full_width=F)
DRINKING_D.tab%>%kable("html", align = "ll")%>%kable_material()%>%kable_styling(full_width=F)
prop.table(DRINKING_D.tab)%>%kable(format = "html", align = "ll", caption = "Drunk Driving Proportion")%>%kable_material()%>%kable_styling(full_width=F)
DRINKING_D.tab%>%kable(format = "html", align = "ll", caption = "Drunk Driving Counts")%>%kable_material()%>%kable_styling(full_width=F)
#Logistic Regression
mylogit <- glm(DRINKING_D ~ FATAL_OR_M + OVERTURNED + CELL_PHONE + SPEEDING + AGGRESSIVE + DRIVER1617 + DRIVER65PLUS + PCTBACHMOR + MEDHHINC, data=mydata, family = "binomial")
summary(mylogit)
#Logistic Regression
mylogit <- glm(DRINKING_D ~ FATAL_OR_M + OVERTURNED + CELL_PHONE + SPEEDING + AGGRESSIVE + DRIVER1617 + DRIVER65PLUS + PCTBACHMOR + MEDHHINC, data=mydata, family = "binomial")
# SAVING LOGSITIC REGRESSION OUTPUT AS LOGITOUTPUT
logitoutput<-summary(mylogit)
# SAVING COEFFS ESTIMATES, STANDARD ERROR, Z-VALUES, AND P-VALUES AS LOGITCOEFFS
logitcoeffs<-logitoutput$coefficients
logitcoeffs
# SAVING ODDS RATIONS AND 95% CONFIDENCE INTERVALS FOR THE ODDS RATIOS AS OR_CI
or_ci<- exp(cbind(OR=ceof(mylogit), confint(mylogit)))
# SAVING ODDS RATIONS AND 95% CONFIDENCE INTERVALS FOR THE ODDS RATIOS AS OR_CI
or_ci<- exp(cbind(OR=coef(mylogit), confint(mylogit)))
# APPENDING COEFFS WITH ODDS RATIOS AND CONFIDENCE INTERVALS
finallogitoutput<- cbind(logitcoeffs, or_ci)
finallogitoutput
View(finallogitoutput)
finallogitoutput%>%kable(format = "html", align = "RlLLLLLl", caption = "Drunk Driving Counts")%>%kable_material()%>%kable_styling(full_width=F)
finallogitoutput%>%kable(format = "html", align = "Rlllllll", caption = "Drunk Driving Counts")%>%kable_material()%>%kable_styling(full_width=F)
finallogitoutput%>%kable(format = "html", align = "rlllllll", caption = "Drunk Driving Counts")%>%kable_material()%>%kable_styling(full_width=F)
finallogitoutput%>%kable(format = "html", align = "rlllllll", caption = "Drunk Driving Counts")%>%
kable_material()%>%kable_styling(full_width=F, stripe_color = "gray!6")
finallogitoutput%>%kable(format = "html", align = "rlllllll", caption = "Drunk Driving Counts")%>%
kable_material()%>%kable_styling(full_width=F, stripe_color = "gray!6", bootstrap_options = "striped",)
finallogitoutput%>%kable(format = "html", align = "rlllllll", caption = "Drunk Driving Counts")%>%
kable_material()%>%kable_styling(full_width=F, "hover", stripe_color = "gray!6", bootstrap_options = "striped",)
finallogitoutput%>%kable(format = "html", align = "rlllllll", caption = "Drunk Driving Counts")%>%
kable_material("hover")%>%kable_styling(full_width=F,  stripe_color = "gray!6", bootstrap_options = "striped",)
finallogitoutput%>%kable(format = "html", align = "rlllllll", caption = "Drunk Driving Counts")%>%
kable_material("hover")%>%kable_styling(full_width=F,  stripe_color = "blue", bootstrap_options = "striped",)
finallogitoutput%>%kable(format = "html", align = "rlllllll", caption = "Drunk Driving Counts")%>%
kable_material("hover")%>%kable_styling(full_width=F)
finallogitoutput%>%kable(format = "html", align = "rlllllll", caption = "Logit Results")%>%
kable_material("hover")%>%kable_styling(full_width=F)
a <- cbind(mydata$DRINKING_D, fit)
#Histogram of fitted values (predicted probabilities of y = 1)
fit <-mylogit$fitted.values
a <- cbind(mydata$DRINKING_D, fit)
#b is matrix a, just sorted by the variable fit
b <- a[order(a[,2]),]
View(b)
#Other cut-offs can be used here!
c <- (b[,2] >= 0.05)
#Creating matrix d which merges matrixes b and c
d <- cbind(b,c)
View(d)
#Let's label the columns of matrix d for easier reading
colnames(d) <- c("Observed.DRINKING_D","Probability.DRINKING_D","Prob.Above.Cutoff")
#Converting matrix to data frame
e=as.data.frame(d)
View(e)
d%>%kable()%>%kable_material_dark()
#Converting matrix to data frame
e=as.data.frame(d)
e%>%kable()%>%kable_material_dark()
#Cross-tabulation
CrossTable(d$Prob.Above.Cutoff, d$Observed.DRINKING_D, prop.r=FALSE,prop.chisq=FALSE, chisq=FALSE,prop.t=FALSE)
#Cross-tabulation
CrossTable(e$Prob.Above.Cutoff, e$Observed.DRINKING_D, prop.r=FALSE,prop.chisq=FALSE, chisq=FALSE,prop.t=FALSE)
# Iterate Thresholds Chapter 6, 7 (left in Chapters)
iterateThresholds <- function(data, observedClass, predictedProbs, group) {
#This function takes as its inputs, a data frame with an observed binomial class (1 or 0); a vector of predicted #probabilities; and optionally a group indicator like race. It returns accuracy plus counts and rates of confusion matrix #outcomes. It's a bit verbose because of the if (missing(group)). I don't know another way to make an optional parameter.
observedClass <- enquo(observedClass)
predictedProbs <- enquo(predictedProbs)
group <- enquo(group)
x = .01
all_prediction <- data.frame()
if (missing(group)) {
while (x <= 1) {
this_prediction <- data.frame()
this_prediction <-
data %>%
mutate(predclass = ifelse(!!predictedProbs > x, 1,0)) %>%
count(predclass, !!observedClass) %>%
summarize(Count_TN = sum(n[predclass==0 & !!observedClass==0]),
Count_TP = sum(n[predclass==1 & !!observedClass==1]),
Count_FN = sum(n[predclass==0 & !!observedClass==1]),
Count_FP = sum(n[predclass==1 & !!observedClass==0]),
Rate_TP = Count_TP / (Count_TP + Count_FN),
Rate_FP = Count_FP / (Count_FP + Count_TN),
Rate_FN = Count_FN / (Count_FN + Count_TP),
Rate_TN = Count_TN / (Count_TN + Count_FP),
Sensitivity = Count_TP / (Count_TP + Count_FP),
Specificity = Count_TN / (Count_TN + Count_FN),
MissClass_Rate = (Count_FP + Count_FN)/(Count_FP + Count_FN + Count_TP + Count_TN),
Accuracy = (Count_TP + Count_TN) /
(Count_TP + Count_TN + Count_FN + Count_FP)) %>%
mutate(Threshold = round(x,2))
all_prediction <- rbind(all_prediction,this_prediction)
x <- x + .01
}
return(all_prediction)
}
else if (!missing(group)) {
while (x <= 1) {
this_prediction <- data.frame()
this_prediction <-
data %>%
mutate(predclass = ifelse(!!predictedProbs > x, 1,0)) %>%
group_by(!!group) %>%
count(predclass, !!observedClass) %>%
summarize(Count_TN = sum(n[predclass==0 & !!observedClass==0]),
Count_TP = sum(n[predclass==1 & !!observedClass==1]),
Count_FN = sum(n[predclass==0 & !!observedClass==1]),
Count_FP = sum(n[predclass==1 & !!observedClass==0]),
Rate_TP = Count_TP / (Count_TP + Count_FN),
Rate_FP = Count_FP / (Count_FP + Count_TN),
Rate_FN = Count_FN / (Count_FN + Count_TP),
Rate_TN = Count_TN / (Count_TN + Count_FP),
Sensitivity = Count_TP / (Count_TP + Count_FP),
Specificity = Count_TN / (Count_TN + Count_FN),
MissClass_Rate = (Count_FP + Count_FN)/(Count_FP + Count_FN + Count_TP + Count_TN),
Accuracy = (Count_TP + Count_TN) /
(Count_TP + Count_TN + Count_FN + Count_FP)) %>%
mutate(Threshold = round(x,2))
all_prediction <- rbind(all_prediction,this_prediction)
x <- x + .01
}
return(all_prediction)
}
}
whichThreshold <-
iterateThresholds(
data=e, observedClass = Observed.DRINKING_D, predictedProbs = Prob.Above.Cutoff)
View(whichThreshold)
ourthresh <- whichThreshold %>%filter(Threshold > 0.02 | Threshold == 0.03|Threshold == 0.05|(Threshold > 0.06 & Threshold < 0.11)| Threshold == 0.15 | Threshold == 0.2 | Threshold == 0.5)
View(ourthresh)
ourthresh <- whichThreshold %>%filter(Threshold == 0.02 | Threshold == 0.03|Threshold == 0.05|(Threshold > 0.06 & Threshold < 0.11)| Threshold == 0.15 | Threshold == 0.2 | Threshold == 0.5)
ourthresh <- whichThreshold %>%filter(Threshold == 0.02 | Threshold == 0.03|Threshold == 0.05|(Threshold > 0.06 & Threshold < 0.11)| Threshold == 0.15 | Threshold == 0.2 | Threshold == 0.5)%>%
dplyr::select(Threshold, Sensitivity, Specificity, MissClass_Rate)
colnames(b) <- c("Observed.DRINKING_D","Probability.DRINKING_D")
whichThreshold <-
iterateThresholds(
data=b, observedClass = Observed.DRINKING_D, predictedProbs = Probability.DRINKING_D)
#b is matrix a, just sorted by the variable fit
b <- a[order(a[,2]),]
b=as.data.frame(b)
colnames(b) <- c("Observed.DRINKING_D","Probability.DRINKING_D")
whichThreshold <-
iterateThresholds(
data=b, observedClass = Observed.DRINKING_D, predictedProbs = Probability.DRINKING_D)
ourthresh <- whichThreshold %>%filter(Threshold == 0.02 | Threshold == 0.03|Threshold == 0.05|(Threshold > 0.06 & Threshold < 0.11)| Threshold == 0.15 | Threshold == 0.2 | Threshold == 0.5)%>%
dplyr::select(Threshold, Sensitivity, Specificity, MissClass_Rate)
ourthresh%>%kable(format = "html", align = "rlll", caption = "Goodness of Fit Metrics",
col.names = c("Cut Off Value", "Sensitivity", "Specificity", "Missclassification Rate"))%>%
kable_material("hover")%>%kable_styling(full_width=F)%>%
row_spec(10, bold = T, color = "white", background = "#D7261E")
ourthresh%>%kable(format = "html", align = "llll", caption = "Goodness of Fit Metrics",
col.names = c("Cut Off Value", "Sensitivity", "Specificity", "Missclassification Rate"))%>%
kable_material("hover")%>%kable_styling(full_width=F)%>%
row_spec(10, bold = T,background = "#d4b52a")
ourthresh%>%kable(format = "html", align = "llll", caption = "Goodness of Fit Metrics",
col.names = c("Cut Off Value", "Sensitivity", "Specificity", "Missclassification Rate"))%>%
kable_material("hover")%>%kable_styling(full_width=F)%>%
row_spec(10, bold = T,background = "#f0d560")
a <- cbind(mydata$DRINKING_D, fit)
#Let's make the names of the variables easy to understand
colnames(a) <- c("labels","predictions")
head(a)
roc <- as.data.frame(a)
pred <- prediction(roc$predictions, roc$labels)
#Below, tpr = true positive rate, another term for sensitivity
#fpr = false positive rate, or 1-specificity
roc.perf = performance(pred, measure = "tpr", x.measure="fpr")
plot(roc.perf)
abline(a=0,b=1)
ourthresh%>%kable(format = "html", align = "llll", caption = "Goodness of Fit Metrics",
col.names = c("Cut Off Value", "Sensitivity", "Specificity", "Missclassification Rate"))%>%
kable_material("hover")%>%kable_styling(full_width=F)%>%
row_spec(10, bold = T,background = "#f0d560")
o
#Cross-tabulation
CrossTable(e$Prob.Above.Cutoff, e$Observed.DRINKING_D, prop.r=FALSE,prop.chisq=FALSE, chisq=FALSE,prop.t=FALSE)
a <- cbind(mydata$DRINKING_D, fit)
#Let's make the names of the variables easy to understand
colnames(a) <- c("labels","predictions")
head(a)
roc <- as.data.frame(a)
pred <- prediction(roc$predictions, roc$labels)
#Below, tpr = true positive rate, another term for sensitivity
#fpr = false positive rate, or 1-specificity
roc.perf = performance(pred, measure = "tpr", x.measure="fpr")
plot(roc.perf)
abline(a=0,b=1)
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
#This will print the optimal cut-off point and the corresponding
#specificity and sensitivity
print(opt.cut(roc.perf, pred))
#This will print the optimal cut-off point and the corresponding
#specificity and sensitivity
print(opt.cut(roc.perf, pred))%>%kable()
#This will print the optimal cut-off point and the corresponding
#specificity and sensitivity
print(opt.cut(roc.perf, pred))%>%kable()%>%kable_styling()
print(opt.cut(roc.perf, pred))%>%kable(format = "html", align = "rl", caption = "Optimal Cutoff")%>%
kable_material("hover")%>%kable_styling(full_width=F)
print(opt.cut(roc.perf, pred))%>%kable(format = "html", align = "ll", caption = "Optimal Cutoff")%>%
kable_material("hover")%>%kable_styling(full_width=F)
print(opt.cut(roc.perf, pred))%>%kable(format = "html", align = "ll", caption = "Optimal Cutoff")%>%
kable_material("hover")%>%kable_styling(full_width=F)%>%row.spec(3, bold=TRUE)
print(opt.cut(roc.perf, pred))%>%kable(format = "html", align = "ll", caption = "Optimal Cutoff")%>%
kable_material("hover")%>%kable_styling(full_width=F)%>%row_spec(3, bold=TRUE)
print(opt.cut(roc.perf, pred))%>%kable(format = "html", align = "ll", caption = "Optimal Cutoff")%>%
kable_material("hover")%>%kable_styling(full_width=F)%>%row_spec(3, bold=TRUE, background = "#f0d560")
print(opt.cut(roc.perf, pred))%>%kable(format = "html", align = "ll", caption = "Optimal Cutoff", col.names = c("Sensitivity", "Specificity", "Cutoff"))%>%
kable_material("hover")%>%kable_styling(full_width=F)%>%row_spec(3, bold=TRUE, background = "#f0d560")
print(opt.cut(roc.perf, pred))%>%kable(format = "html", align = "ll", caption = "Optimal Cutoff", row.names =  = c("Sensitivity", "Specificity", "Cutoff"))%>%
kable_material("hover")%>%kable_styling(full_width=F)%>%row_spec(3, bold=TRUE, background = "#f0d560")
print(opt.cut(roc.perf, pred))%>%kable(format = "html", align = "ll", caption = "Optimal Cutoff", row.names = c("Sensitivity", "Specificity", "Cutoff"))%>%
kable_material("hover")%>%kable_styling(full_width=F)%>%row_spec(3, bold=TRUE, background = "#f0d560")
print(opt.cut(roc.perf, pred))%>%kable(format = "html", align = "ll", caption = "Optimal Cutoff")%>%
kable_material("hover")%>%kable_styling(full_width=F)%>%row_spec(3, bold=TRUE, background = "#f0d560")
auc.perf = performance(pred, measure ="auc")
auc.perf@y.values
print(auc.perf@y.values)
print(auc.perf@y.values)%>%kable()%>%kable_styling()
print(auc.perf@y.values)%>%kable(col_names= "AUC", format = "html", align = "c", caption = "Area Under the Curve")%>%kable_material()%>%kable_styling(full_width=F)
print(auc.perf@y.values)%>%kable(col_names= c("AUC"), format = "html", align = "c", caption = "Area Under the Curve")%>%kable_material()%>%kable_styling(full_width=F)
print(auc.perf@y.values)%>%kable(col.names= c("AUC"), format = "html", align = "c", caption = "Area Under the Curve")%>%kable_material()%>%kable_styling(full_width=F)
print(auc.perf@y.values)%>%kable(col.names= c("Area Under the Curve"), format = "html", align = "c")%>%kable_material()%>%kable_styling(full_width=F)
print(auc.perf@y.values)%>%kable(col.names= c("Area Under the Curve"), format = "html", align = "c")%>%kable_material()%>%kable_styling(full_width=F, position = "center")
## 3.a.i ROUND TWO ----
#Logistic Regression
mylogit2 <- glm(DRINKING_D ~ FATAL_OR_M + OVERTURNED + CELL_PHONE + SPEEDING + AGGRESSIVE + DRIVER1617 + DRIVER65PLUS, data=mydata, family = "binomial")
## 3.a.ii ROUND TWO----
# SAVING LOGSITIC REGRESSION OUTPUT AS LOGITOUTPUT
logitoutput2<-summary(mylogit2)
# SAVING COEFFS ESTIMATES, STANDARD ERROR, Z-VALUES, AND P-VALUES AS LOGITCOEFFS
logitcoeffs2<-logitoutput2$coefficients
logitcoeffs2
# SAVING ODDS RATIONS AND 95% CONFIDENCE INTERVALS FOR THE ODDS RATIOS AS OR_CI
or_ci2<- exp(cbind(OR=coef(mylogit2), confint(mylogit2)))
# APPENDING COEFFS WITH ODDS RATIOS AND CONFIDENCE INTERVALS
finallogitoutput2<- cbind(logitcoeffs2, or_ci2)
finallogitoutput2
finallogitoutput2%>%kable(format = "html", align = "rlllllll", caption = "Logit Results: Round Two")%>%
kable_material("hover")%>%kable_styling(full_width=F)
finallogitoutput%>%kable(format = "html", align = "rlllllll", caption = "Logit Results")%>%
kable_material("hover")%>%kable_styling(full_width=F)
AIC(mylogit1, mylogit2)
AIC(mylogit, mylogit2)
AIC(mylogit, mylogit2)%>%kable()%>%kable_styling()
AIC(mylogit, mylogit2)%>%as.data.frame()%>%kable()%>%kable_styling()
aic <- AIC(mylogit, mylogit2)%>%as.data.frame()
View(aic)
rownames(aic) <- NULL
aic <- aic%>%mutate(Model = c("Logit1", "Logit2"))
aic <- aic%>%mutate(Model = c("Logit 1", "Logit 2"), df = "Degrees of Freedom")%>%dplyr::select(Model, "Degrees of Freedom", AIC)
aic <- aic%>%mutate(Model = c("Logit 1", "Logit 2"))%>% rename(df = "Degrees of Freedom")%>%dplyr::select(Model, "Degrees of Freedom", AIC)
aic <- aic%>%mutate(Model = c("Logit 1", "Logit 2"))%>% rename("Degrees of Freedom" = df)%>%dplyr::select(Model, "Degrees of Freedom", AIC)
aic <- aic%>%mutate(Model = c("Logit 1", "Logit 2"))%>% rename("Degrees of Freedom" = df)%>%dplyr::select(Model, "Degrees of Freedom", AIC)%>%kable()%>%kable_styling()
aic <- AIC(mylogit, mylogit2)%>%as.data.frame()
rownames(aic) <- NULL
aic%>%mutate(Model = c("Logit 1", "Logit 2"))%>% rename("Degrees of Freedom" = df)%>%dplyr::select(Model, "Degrees of Freedom", AIC)%>%kable()%>%kable_styling()
aic%>%mutate(Model = c("Logit 1", "Logit 2"))%>% rename("Degrees of Freedom" = df)%>%
dplyr::select(Model, "Degrees of Freedom", AIC)%>%kable(format = "html", align = "rll", caption = "AIC Results")%>%kable_material("hover")%>%kable_styling()
aic%>%mutate(Model = c("Logit 1", "Logit 2"))%>% rename("Degrees of Freedom" = df)%>%
dplyr::select(Model, "Degrees of Freedom", AIC)%>%kable(format = "html", align = "lll", caption = "AIC Results")%>%kable_material("hover")%>%kable_styling()
aic%>%mutate(Model = c("Logit 1", "Logit 2"))%>% rename("Degrees of Freedom" = df)%>%
dplyr::select(Model, "Degrees of Freedom", AIC)%>%kable(format = "html", align = "lll", caption = "AIC Results")%>%kable_material("hover")%>%kable_styling(full_width=F)
aic%>%mutate(Model = c("Logit 1", "Logit 2"))%>% rename("Degrees of Freedom" = df)%>%
dplyr::select(Model, "Degrees of Freedom", AIC)%>%kable(format = "html", align = "lll", caption = "AIC Results")%>%
kable_material("hover")%>%kable_styling(full_width=F)%>%row_spec(1, bold=TRUE, background = "#f0d560")
aic%>%mutate(Model = c("Logit 1", "Logit 2"))%>% rename("Degrees of Freedom" = df)%>%
dplyr::select(Model, "Degrees of Freedom", AIC)%>%kable(format = "html", align = "lll", caption = "AIC Results")%>%
kable_material("hover")%>%kable_styling(full_width=F)
aic%>%mutate(Model = c("Logit 1", "Logit 2"))%>% rename("Degrees of Freedom" = df)%>%
dplyr::select(Model, "Degrees of Freedom", AIC)%>%kable(format = "html", align = "lll", caption = "AIC Results")%>%
kable_minimal("hover")%>%kable_styling(full_width=F)
aic%>%mutate(Model = c("Logit 1", "Logit 2"))%>% rename("Degrees of Freedom" = df)%>%
dplyr::select(Model, "Degrees of Freedom", AIC)%>%kable(format = "html", align = "lll", caption = "AIC Results")%>%
kable_paper("hover")%>%kable_styling(full_width=F)
View(whichThreshold)
finallogitoutput%>%kable(format = "html", align = "rlllllll", caption = "Logit Results")%>%
kable_paper("hover")%>%kable_styling(full_width=F)
(4.6598146-1)*100
(exp(1.5389757)-1)*100
(2.2569488-1)*100
(2.5317769-1)*100
(1.0000028-1)*100
(0.5505068-1)*100
(0.2779550-1)*100
(0.4608583-1)*100
ourthresh%>%kable(format = "html", align = "llll", caption = "Goodness of Fit Metrics",
col.names = c("Cut Off Value", "Sensitivity", "Specificity", "Missclassification Rate"))%>%
kable_paper("hover")%>%kable_styling(full_width=F)%>%
row_spec(10, bold = T,background = "#f0d560")
print(opt.cut(roc.perf, pred))%>%kable(format = "html", align = "ll", caption = "Optimal Cutoff")%>%
kable_paper("hover")%>%kable_styling(full_width=F)%>%row_spec(3, bold=TRUE, background = "#f0d560")
opt.cut(roc.perf, pred)%>%kable(format = "html", align = "ll", caption = "Optimal Cutoff")%>%
kable_paper("hover")%>%kable_styling(full_width=F)%>%row_spec(3, bold=TRUE, background = "#f0d560")
auc.perf@y.values%>%kable(col.names= c("Area Under the Curve"), format = "html", align = "c")%>%kable_material()%>%kable_styling(full_width=F, position = "center")
finallogitoutput2%>%kable(format = "html", align = "rlllllll", caption = "Logit Results: Round Two")%>%
kable_paper("hover")%>%kable_styling(full_width=F)
aic%>%mutate(Model = c("Logit 1", "Logit 2"))%>% rename("Degrees of Freedom" = df)%>%
dplyr::select(Model, "Degrees of Freedom", AIC)%>%kable(format = "html", align = "lll", caption = "AIC Results")%>%
kable_paper("hover")%>%kable_styling(full_width=F)
100*60
1000000/6000
167/60
?unionSpatialPolygons()
#load libraries
library(tidyverse)
library(sf)
library(RSocrata)
library(viridis)
library(spatstat)
library(raster)
library(spdep)
library(FNN)
library(grid)
library(gridExtra)
library(knitr)
library(kableExtra)
library(tidycensus)
library(RColorBrewer)
library(ggthemes)
library(sp)
library(rgeos)
library(maptools)
options(scipen=999)
options(tigris_class = "sf")
